#!/usr/bin/ruby -w
# 1.9.1 required (1.8 does NOT work!)

=begin
 * rplaymidi++.rb - play Standard MIDI Files to sequencer port(s)
 * This is a object oriented port of aplaymidi.c by Clemens Ladish
 *
 * Copyright (c) 2004-2006 Clemens Ladisch <clemens@ladisch.de>
 * Copyright (c) 2010 Eugene Brazwick <eugene.brazwick@rattink.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
=end

=begin

Violates MIDI standard by not sending NOTEOFF for all NOTEONs.  Fails when INTR
is pressed (or whatever other killing signal).
This too is an issue with aplaymidi to begin with.
=end

require 'rrts/rrts'

include RRTS

=begin
 * A MIDI event after being parsed/loaded from the file.
 * There could be made a case for using snd_seq_event_t instead.
=end
class Track # :no-doc:
# 	struct event *first_event;	/* list of all events in this track */
# 	int end_tick;			/* length of this track */
#
# 	struct event *current_event;	/* used while loading and playing */
private
  def initialize
    @events = []
    rewind
  end

public
  attr_accessor :end_tick
  attr :events

  def current_event
    @events[@ptr]
  end

  def next
    @ptr += 1
  end

  def rewind
    @ptr = 0
  end

  def << event
    @events << event
  end
end # class Track

@end_delay = 2

# parses one or more port addresses from the string
def parse_ports arg
  @ports = arg.split(',').map { |name| @seq.parse_address(name)  }
end

class SoundChunk #:no-doc:
  private
  def initialize
    @tracks = []
  end
  public
  attr_accessor :tempo
  attr_accessor :tracks
  attr_accessor :num_tracks
end

# The Parser will be a class that is basically used in the chunk constructor.
# It builds a single chunk from an inputfile
# DEPRECATED, should be replaced by parser in lib/rrts/node/midifilereader.rb
class MidifileParser #:no-doc:
  private
  def initialize file_name, chunk, destination_ports
    @file = file_name == "-" ? STDIN : File::open(file_name, "rb")
    begin
      @file_name, @chunk, @destination_ports = file_name, chunk, destination_ports
      case read_id
      when MTHD
        read_smf
      when RIFF
        read_riff
      else
        raise RRTSError.new("%s is not a Standard MIDI File", @file_name)
      end
    ensure
      @file.close unless @file == STDIN
    end
  end

  def read_byte
    @file.readbyte  # throws EOFError
  end

  #  reads a little-endian 32-bit integer
  def read_32_le
    #       int value;
    value = read_byte
    value |= read_byte << 8
    value |= read_byte << 16
    value |= read_byte << 24
    #   .tap{|v| puts "read_32_le -> #{v}" }
  end

  # /* reads a 4-character identifier */
  alias :read_id :read_32_le

  # Used to create the constants below at class-parse-time
  def self.make_id c
    c[0].ord | (c[1].ord << 8) | (c[2].ord << 16) | (c[3].ord << 24)
  end

  Encoding.default_internal = 'ascii-8bit'
  MTHD = make_id('MThd')
  RIFF = make_id('RIFF')
  MTRK = make_id('MTrk')
  RMID = make_id('RMID')
  DATA = make_id('data')
  Encoding.default_internal = 'utf-8'

  # /* reads a fixed-size big-endian number */
  def read_int bytes
    #   int c, value = 0;
    value = 0
    bytes.times {
      c = read_byte
    value = (value << 8) | c;
    }
    #   puts "read_int -> #{value}"
    value
  end

  # /* reads a variable-length number */
  def read_var
    #       int value, c;
    c = read_byte
    value = c & 0x7f;
    if (c & 0x80) != 0
      c = read_byte
      value = (value << 7) | (c & 0x7f);
      if (c & 0x80) != 0
        c = read_byte
        value = (value << 7) | (c & 0x7f);
        if (c & 0x80)  != 0
          c = read_byte
          value = (value << 7) | c;
          return false if (c & 0x80) != 0
        end
      end
    end
    #   puts "read_var -> #{value}"
    value
  end

  def skip bytes
    bytes.times { read_byte }
  end

  def read_error
    raise RRTSError.new("%s: invalid MIDI data (offset %#x)", @file_name, @file.pos)
  end

  # read 7bit components.
  def read_fixed bytes
    value = 0
    bytes.times do
      c = read_byte or invalid
      value = (value << 7) | (c & 0x7f)
    end
#     puts "read_fixed->#{value}"
    value
  end

  #  reads one complete track from the file
  def read_track track, track_end
    tag "read_track, track_end=#{track_end}"
    #
    tick = 0
    last_cmd = 0
    port = @destination_ports[0] # in case there are none set
    #  the current file position is after the track ID and length
    while @file.pos < track_end
      delta_ticks = read_var or break
      #     puts "delta_ticks=#{delta_ticks}"
      tick += delta_ticks;
      c = read_byte
      if (c & 0x80) != 0
        # have command
        cmd = c
        last_cmd = cmd if cmd < 0xf0
      else # running status
        @file.ungetbyte c
        cmd = last_cmd
        read_error if cmd == 0
      end
      status = cmd >> 4
      channel = (cmd & 0x0f) + 1
      case status
        #  maps SMF events to ALSA sequencer events
      when 0x8
        note = read_byte & 0x7f
        off_vel = read_byte & 0x7f
        event = NoteOffEvent.new(channel, note, off_velocity: off_vel, destination: port, tick: tick)
        track << event
      when 0x9, 0xa #* channel msg with 2 parameter bytes */
        note = read_byte & 0x7f
        vel =  read_byte & 0x7f
        event = (status == 0x9 ? NoteOnEvent : KeypressEvent).new(channel, note, vel,
                                                                  destination: port, tick: tick)
        track << event
      when 0xb # control msg with 2 parameter byte
        param = read_byte & 0x7f
        val =  read_byte & 0x7f
        event = ControllerEvent.new(channel, param, val, destination: port, tick: tick)
        track << event
      when 0xe
        event = PitchbendEvent.new(cmd & 0x0f, read_fixed(2) - 0x2000, destination: port, tick: tick)
        track << event
      when 0xc
        event = ProgramChangeEvent.new(channel, read_byte & 0x7f, destination: port, tick: tick)
        track << event
      when  0xd
        event = ChannelPressureEvent.new(channel, read_byte & 0x7f, destination: port, tick: tick)
        track << event
      when 0xf
        case cmd
        when 0xf0, 0xf7 # sysex, continued sysex, or escaped commands
          len = read_var or read_error
          len += 1 if cmd == 0xf0
          sysex = ''
          sysex.force_encoding 'ascii-8bit'
          if cmd == 0xf0
            sysex += 0xf0.chr
            c = 1
          else
            c = 0
          end
          while c < len
            sysex += read_byte.chr
            c += 1
          end
          event = SysexEvent.new sysex, dest: port, tick: tick
        when 0xff # meta event
          c = read_byte
          len = read_var or read_error
          case (c)
          when 0x21 # port number
            read_error if len < 1
            port = @destination_ports[read_byte % @destination_ports.length]
            skip(len - 1);
          when 0x2f # end of track
            track.end_tick = tick
            @file.pos = track_end
            return true
          when 0x51 # tempo
            read_error if len < 3
            if @smpte_timing
              #  SMPTE timing doesn't change
              skip len
            else
              tempo = read_byte << 16
              tempo |= read_byte << 8
              tempo |= read_byte
              event = TempoEvent.new 0, tempo, dest: port, tick: tick
              track << event
              skip(len - 3) if len > 3
            end
          else # ignore all other meta events
              skip len
          end
        else  #  invalid Fx command
         read_error
        end
      else
        #  cannot happen
        read_error
      end
    end
    raise RRTSError.new("%s: invalid MIDI data (offset %#x)", @file_name, @file.pos)
  end

  def invalid_format
    raise RRTSError.new("%s: invalid file format", @file_name)
  end

  # reads an entire MIDI file
  def read_smf
    # the curren position is immediately after the "MThd" id
    header_len = read_int(4);
    invalid_format if (header_len < 6)

    type = read_int(2);
    if type != 0 && type != 1
      raise RRTSError.new("%s: type %d format is not supported", @file_name, type)
    end
    num_tracks = @chunk.num_tracks = read_int(2)
    unless (1..1000) === num_tracks
      raise RRTSError.new("%s: invalid number of tracks (%d)", @file_name, num_tracks)
    end
    time_division = read_int 2
    #   puts "time_division=#{time_division}"
    #       /* interpret and set tempo */
    @smpte_timing = (time_division & 0x8000) != 0
    require 'rrts/tempo'
    unless @smpte_timing
      # time_division is ticks per quarter
      queue_tempo = Tempo.new 120, ticks_per_beat: time_division
    else
      queue_tempo = Tempo.new(0x80 - ((time_division >> 8) & 0x7f), smpte_timing: true,
                              ticks_per_frame: (time_division & 0xff))
      # upper byte is negative frames per second
      # lower byte is ticks per frame
    end
    @chunk.tempo = queue_tempo
    #   read tracks
    for i in (0...num_tracks)
      # search for MTrk chunk
      len = 0
      loop do
        id = read_id();
        len = read_int(4);
        if len < 0 || len >= 0x10000000
          raise RRTSError.new("%s: invalid chunk length %d", @file_name, len)
          return false
        end
        break if id == MTRK
        skip len
      end
      track = @chunk.tracks[i] = Track.new
      return false unless read_track(track, @file.pos + len)
    end
    true
  end

  def read_riff
    # skip file length
    4.times { read_byte }
    #  check file type ("RMID" = RIFF MIDI)
    invalid_format unless read_id == RMID
    #  search for "data" chunk
    loop do
      id = read_id
      len = read_32_le
      break if id == DATA
      skip((len + 1) & ~1)
    end
    #  the "data" chunk must contain data in SMF format
    invalid_format unless read_id == MTHD
    read_smf
  end

end # class MidifileParser

def play_midi chunk
# calculate length of the entire file
  @queue.tempo = chunk.tempo
  max_tick = -1;
  for track in chunk.tracks
    max_tick = track.end_tick if track.end_tick > max_tick
    track.rewind
  end
  @queue.start
# The queue won't be started until the START_QUEUE event is
# actually drained to the kernel, which is exactly what we want.

  @noteons = {} # per portid, per channel, per note
  begin
    loop do
      event = nil
      event_track = nil
      min_tick = max_tick + 1;
  # search next event
      for track in chunk.tracks
        e2 = track.current_event
        if e2 && e2.tick < min_tick
          min_tick, event, event_track = e2.tick, e2, track
        end
      end
      break unless event # end of song reached
      event_track.next
      case event
      when NoteOnEvent
        if event.velocity == 0 # it counts as a NoteOff then.
          ((@noteons[event.dest.port] ||= {})[event.channel] ||= {})[event.note] = nil
        else
          ((@noteons[event.dest.port] ||= {})[event.channel] ||= {})[event.note] = event
        end
      when NoteOffEvent
        ((@noteons[event.dest.port] ||= {})[event.channel] ||= {})[event.note] = nil
      end
      event.sender_queue = @queue
      event.source = @source_port
  #     print '>'
      # this blocks when the output pool has been filled
      # in ruby C-calls also block signals...
      @seq << event
    end
  ensure
#     puts "ports=#{ports.keys.inspect}"
    hangs = false
    for k, ports in @noteons
#       puts "channels=#{channels.keys.inspect}"
      for channel, channels in ports
        for note, event in channels
          next unless event
          puts "#{File.basename(__FILE__)}:#{__LINE__}:sending kill for note #{note} on port #{k} on ch #{event.channel}"
          @seq << NoteOffEvent.new(channel, note, direct: true, dest: event.dest,
                                   sender: @source_port)
          hangs = true
        end
      end
    end
    if hangs
      @seq.flush # is direct so should not matter
      @seq.sync_output_queue
      sleep 2 # prevent seq from closing down before the deed is done....
    end
    #  schedule queue stop at end of song
    event = StopEvent.new @queue, tick: max_tick, dest: @seq.system_timer, sender_queue: @queue,
                        source: @source_port
    @seq << event
    # make sure that the sequencer sees all our events
    puts "#{File.basename(__FILE__)}:#{__LINE__}:flush"
    @seq.flush
=begin
  There are three possibilities how to wait until all events have
  been played:
  1) send an event back to us (like pmidi does), and wait for it;
  2) wait for the EVENT_STOP notification for our queue which is sent
  by the system timer port (this would require a subscription);
  3) wait until the output pool is empty.
  The last is the simplest.
=end
    @seq.sync_output_queue
    # give the last notes time to die away
    sleep(@end_delay) if @end_delay > 0
  end
end

def play_file file_name
  chunk = SoundChunk.new
  MidifileParser.new file_name, chunk, @ports
#   require 'yaml'
#   File.open("./rplaymidi.yaml", "w") { |file| YAML.dump(chunk, file) }
  play_midi chunk
end

SND_UTIL_VERSION_STR = '1.0'

require 'optparse'
opts = OptionParser.new
opts.banner = "Usage: #$PROGRAM_NAME [options] inputfile ..."
opts.on('-h', '-?', '--help', 'this help') { puts opts.to_s; exit 1; }
opts.on('-V', '--version', 'show version') do
  puts "rplaymidi version " + SND_UTIL_VERSION_STR
  exit 0
end
opts.on('-l', '--list', 'list output ports') do
  puts " Port    Client name                      Port name"
  for portname, port in @seq.ports
      # port must understand MIDI messages
    if port.type?(:midi_generic) &&
      #  we need both WRITE and SUBS_WRITE
      port.capability?(:write, :subscription_write)
        printf "%3d:%-3d  %-32.32s %s\n", port.client_id, port.port, port.client.name, portname
    end
  end
  exit 0
end

opts.on('-p', '--port=VAL', 'comma separated list of ports') { |arg| parse_ports(arg) }
opts.on('-d', '--delay=VAL', 'exit delay', Integer) { |d| @end_delay = d }

def sigterm_exit
  # this is what miniarp.c did.
  # But it is not good enough. Some NoteOn events are already in the device.
  # Also ruby takes about 5 seconds before we even get here.
  # Presumably because the 'ensure' in Sequencer is done first, so we are too late anyway.
  # We simply need an ensure on the midiplayer. And it must keep track of open NoteOn
  # events sent.
  STDERR.print("Closing, please wait...");
  @queue.clear
#   sleep 2
#   @queue.stop
#   @queue.free
  STDERR.puts
  # this will still handle all 'ensures' first
  exit 0
end

require 'rrts/sequencer'

  #   /* open sequencer */
Sequencer.new('rplaymidi', blockingmode: Sequencer::Blocking) do |seq|
  @seq = seq
  file_names = opts.parse ARGV
  if !@ports || @ports.empty?
  # 			/* use env var for compatibility with pmidi */
    ports_str = ENV["ALSA_OUTPUT_PORTS"]
    parse_ports(ports_str) if ports_str && !ports_str.empty?
    if !@ports || @ports.empty?
      raise RRTSError.new("Please specify at least one port with --port.")
    end
  end
  if file_names.empty?
    raise RRTSError.new("Please specify a file to play.")
  end
  @source_port = MidiPort.new(seq, 'rplaymidi', port: 0, midi_generic: true, application: true)
  #       the first created port is 0 anyway, but let's make sure ...
  require 'rrts/midiqueue'
  MidiQueue.new(@seq, 'rplaymidi') do |queue|
    #   the queue is now locked, which is just fine
    @queue = queue
    Signal.trap(:INT) { sigterm_exit } # strangely enough it does not respond immediately?
    Signal.trap(:TERM) { sigterm_exit }
=begin
      We send MIDI events with explicit destination addresses, so we don't
      need any connections to the playback ports.  But we connect to those
      anyway to force any underlying RawMIDI ports to remain open while
      we're playing - otherwise, ALSA would reset the port after every
      event.
=end
    for port in @ports
      @source_port.connect_to port
    end
    for file_name in file_names
      play_file file_name
    end
  end # free queue
end # seq.close
